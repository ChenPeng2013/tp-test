// Code generated by go-bindata.
// sources:
// resource/default.zz.lua
// resource/english.txt
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceDefaultZzLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4d\x6b\xdc\x30\x10\xbd\xef\xaf\x98\x9b\x37\xa0\x35\x1a\x7f\xec\x5a\x94\x1e\x42\x08\xe4\x56\x48\x02\x3d\xcb\x6b\xd9\x11\xc8\x72\x90\xe5\x96\xa5\xf8\xbf\x97\x99\xb5\xd7\xdb\x66\x2e\x7e\x33\x7a\xf3\xfc\xe6\x45\x5d\x3b\x33\xc2\x77\xf8\xb3\x03\x00\x08\xc3\x6f\x6e\x50\x0a\xc8\xa4\x80\x5c\x0a\x28\xa4\x80\x52\x0a\x38\x4a\x01\x27\x29\xa0\x92\x02\x94\x9c\x05\x2f\x1c\x0e\xf0\xf6\xf2\xe3\x27\x3c\xbd\x3c\xbe\x3e\x3e\xbd\x3f\xbf\xc2\xdb\xf3\xfb\x37\x7e\x3a\x7f\xe8\x30\x9a\xc8\x7a\xc9\x14\xdb\x2a\x11\xc0\xdf\xbe\x2e\x08\xea\xf1\x6c\x2d\x01\xa7\xa3\xf5\x48\xa8\xb6\x5e\x87\x4b\xb2\x68\x7f\xea\x10\x6d\xb4\x83\x67\x89\x42\xc0\x51\x40\x25\x00\x4b\xd2\xf1\x8d\x69\x89\x38\xef\x76\xad\x35\xae\xd9\x6e\x88\x97\xcf\xeb\x45\x49\x6d\x3b\xeb\x23\x09\xb7\x6e\xd0\x0c\x9a\x61\xaa\x9d\x61\x64\xce\xb6\xd7\x6e\x5f\xf0\xa9\x0f\xc9\xf5\x9f\x54\xb7\x27\x4a\xa1\x78\xb8\x27\x1f\x05\xe4\x3c\xa0\xe3\xf6\xbc\x06\xc9\x2f\x1d\x6e\xed\x62\x7d\xb4\x9d\x67\x0b\x04\x4c\xc3\x97\xfb\x05\xcf\xe4\xb9\xd1\x51\xdf\x1c\xfb\xa9\xaf\x4d\xb8\x7a\xf6\x93\x73\x44\x8f\xd6\x5f\x16\xf3\x63\xaf\x9d\x63\xbc\x59\xc4\x2c\x55\x8a\x33\xc3\x54\x4a\x45\xe0\xa0\x52\xac\xb2\xfc\x9e\x75\x40\xc4\x14\x33\xcc\x98\x98\xa5\xaa\x3a\xe5\xeb\x92\xaa\x4e\x15\xde\x93\x65\x8a\x98\xe5\x45\xc9\x5a\x92\xb8\x28\xf3\xa5\x91\x4b\xfd\xb7\xb0\x4d\xa9\x53\x6b\xad\x0a\x5b\xff\x25\xdb\x65\xb4\xc6\x15\x83\xf5\xdd\xbf\x01\x38\x13\xa3\x09\x84\x8c\xef\x9c\x1d\x3f\x38\x0a\x26\xee\xb1\xe4\xa4\xe7\xbf\x01\x00\x00\xff\xff\x1a\x8f\x36\x81\xbe\x02\x00\x00")

func resourceDefaultZzLuaBytes() ([]byte, error) {
	return bindataRead(
		_resourceDefaultZzLua,
		"resource/default.zz.lua",
	)
}

func resourceDefaultZzLua() (*asset, error) {
	bytes, err := resourceDefaultZzLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/default.zz.lua", size: 702, mode: os.FileMode(436), modTime: time.Unix(1567393682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceEnglishTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x90\xd1\x0d\xe4\x20\x0c\x44\xff\x5f\x23\xa9\x65\xcb\x70\x82\x37\xe6\x02\xf8\x04\xe4\x10\xdd\x9f\xbc\x3f\xcf\x03\x96\x47\xa3\x91\xd3\xdf\x89\x94\x82\xb4\x84\x74\x45\x06\x32\x11\x4e\xb9\x1e\x4e\xbd\xe4\x1d\xca\xa9\xda\x38\x95\xf3\x9d\x5c\xd2\x8e\x1f\xb9\xbc\x2a\x97\xbf\x25\x91\x72\x8a\xdf\x94\x13\xc9\x7f\xca\xf9\x7a\xe7\xdb\xbd\x72\xeb\xe4\xf6\xdc\x6e\x6e\xf7\xc4\xed\xf1\xc4\x24\x61\xf2\x4f\x31\x3d\x06\xa6\x3d\x54\xc7\x74\x63\x8a\xe5\x8a\xe5\x81\xf9\xe2\x73\x94\xc2\xe7\xa8\xe4\x2f\xb9\x91\x07\x79\x1e\x01\x3e\xfc\x79\xc7\xe4\x69\xbe\x28\xf9\x51\x8a\xfb\x43\x55\x69\x54\xa5\x6e\x9a\x4f\x62\xd9\x1c\xff\xe2\x86\x3f\xb2\xf1\x07\x6f\x8a\x37\xbc\x13\x05\x74\x95\x52\x36\x3d\xdf\x36\x19\xb2\x19\xaa\x0c\x53\x86\x57\x9d\x16\xd1\x43\x31\x9c\xa9\xa5\x30\x4d\x22\x41\x0c\xa6\x69\x0b\x74\x0d\xee\x00\x71\xf2\x04\x07\x33\x57\x65\x3a\xef\x5f\x96\xb4\xc9\x92\xc1\x0a\x8f\x15\x17\x4b\x59\x61\xb2\xc2\x64\x99\xb3\x6c\xb3\x72\xac\xf3\x34\xd6\xaf\xdc\xad\x62\x6c\x1d\x6c\x7f\x8f\xae\x31\x7a\xe0\x7f\x00\x00\x00\xff\xff\xd6\xa3\xa5\xd2\xbd\x01\x00\x00")

func resourceEnglishTxtBytes() ([]byte, error) {
	return bindataRead(
		_resourceEnglishTxt,
		"resource/english.txt",
	)
}

func resourceEnglishTxt() (*asset, error) {
	bytes, err := resourceEnglishTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/english.txt", size: 445, mode: os.FileMode(436), modTime: time.Unix(1567566056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/default.zz.lua": resourceDefaultZzLua,
	"resource/english.txt": resourceEnglishTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resource": &bintree{nil, map[string]*bintree{
		"default.zz.lua": &bintree{resourceDefaultZzLua, map[string]*bintree{}},
		"english.txt": &bintree{resourceEnglishTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

